import { ChildProperty } from '@syncfusion/ej2-base';
import { FontModel, BorderModel } from './base-model';
/**
 * Configures the borders in circular gauge.
 */
export declare class Border extends ChildProperty<Border> {
    /**
     * The color of the border, which accepts value in hex, rgba as a valid CSS color string.
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
}
/**
 * Configures the fonts in circular gauge.
 */
export declare class Font extends ChildProperty<Font> {
    /**
     * Font size for text.
     * @default '16px'
     */
    size: string;
    /**
     * Color for text.
     */
    color: string;
    /**
     * FontFamily for text.
     * @default 'segoe UI'
     */
    fontFamily: string;
    /**
     * FontWeight for text.
     * @default 'Normal'
     */
    fontWeight: string;
    /**
     * FontStyle for text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * Opacity for text.
     * @default 1
     */
    opacity: number;
}
/**
 * Configures the margin of circular gauge.
 */
export declare class Margin extends ChildProperty<Margin> {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom: number;
}
/**
 * Configures the tooltip in circular gauge.
 */
export declare class TooltipSettings extends ChildProperty<TooltipSettings> {
    /**
     * Enable / Disable the visibility of tooltip.
     * @default false
     */
    enable: boolean;
    /**
     * The fill color of the tooltip, which accepts value in hex, rgba as a valid CSS color string.
     * @default null
     */
    fill: string;
    /**
     * Options to customize the tooltip text.
     */
    textStyle: FontModel;
    /**
     * Format of the tooltip content.
     * @default null
     */
    format: string;
    /**
     * Custom template to format the tooltip content. Use ${x} and ${y} as a placeholder text to display the corresponding data point.
     * @default null
     */
    template: string;
    /**
     * If set true, tooltip will animate, while moving from one point to another.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Options to customize the border for tooltip.
     */
    border: BorderModel;
    /**
     * Options to show the tooltip position on pointer
     * @default false
     */
    showAtMousePosition: boolean;
}
