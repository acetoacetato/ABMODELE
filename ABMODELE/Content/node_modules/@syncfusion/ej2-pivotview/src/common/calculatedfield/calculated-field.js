import { Dialog } from '@syncfusion/ej2-popups';
import { Droppable, createElement, extend, remove, addClass, closest } from '@syncfusion/ej2-base';
import { prepend, append, KeyboardEvents, removeClass } from '@syncfusion/ej2-base';
import { Button, RadioButton, CheckBox } from '@syncfusion/ej2-buttons';
import { MaskedTextBox } from '@syncfusion/ej2-inputs';
import * as cls from '../../common/base/css-constant';
import { TreeView } from '@syncfusion/ej2-navigations';
import { ContextMenu as Menu } from '@syncfusion/ej2-navigations';
import * as events from '../../common/base/constant';
import { Accordion } from '@syncfusion/ej2-navigations';
/**
 * Module to render Calculated Field Dialog
 */
var COUNT = 'Count';
var AVG = 'Avg';
var MIN = 'Min';
var MAX = 'Max';
var SUM = 'Sum';
var DISTINCTCOUNT = 'DistinctCount';
var PRODUCT = 'Product';
var STDEV = 'SampleStDev';
var STDEVP = 'PopulationStDev';
var VAR = 'SampleVar';
var VARP = 'PopulationVar';
var CALC = 'CalculatedField';
var AGRTYPE = 'AggregateType';
/** @hidden */
var CalculatedField = /** @class */ (function () {
    /** Constructor for calculatedfield module */
    function CalculatedField(parent) {
        this.parent = parent;
        this.existingReport = null;
        this.parent.calculatedFieldModule = this;
        this.removeEventListener();
        this.addEventListener();
        this.parentID = this.parent.element.id;
        this.dialog = null;
        this.inputObj = null;
        this.treeObj = null;
        this.droppable = null;
        this.menuObj = null;
        this.newFields = null;
        this.isFieldExist = true;
        this.formulaText = null;
        this.fieldText = null;
        this.isEdit = false;
        this.currentFieldName = null;
        this.confirmPopUp = null;
    }
    /**
     * To get module name.
     * @returns string
     */
    CalculatedField.prototype.getModuleName = function () {
        return 'calculatedfield';
    };
    CalculatedField.prototype.keyActionHandler = function (e) {
        var node = e.currentTarget.querySelector('.e-hover.e-node-focus');
        if (node) {
            switch (e.action) {
                case 'moveRight':
                    this.displayMenu(node.previousSibling);
                    break;
                case 'enter':
                    var field = node.getAttribute('data-field');
                    var type = node.getAttribute('data-type');
                    var dropField = this.dialog.element.querySelector('#' + this.parentID + 'droppable');
                    if (dropField.value === '') {
                        if (type === CALC) {
                            dropField.value = node.getAttribute('data-uid');
                        }
                        else {
                            dropField.value = '"' + type + '(' + field + ')' + '"';
                        }
                    }
                    else if (dropField.value !== '') {
                        if (type === CALC) {
                            dropField.value = dropField.value + node.getAttribute('data-uid');
                        }
                        else {
                            dropField.value = dropField.value + '"' + type + '(' + field + ')' + '"';
                        }
                    }
                    break;
            }
        }
    };
    /**
     * Trigger while click treeview icon.
     * @param  {MouseEvent} e
     * @returns void
     */
    CalculatedField.prototype.fieldClickHandler = function (e) {
        var node = e.event.target.parentElement;
        if (e.event.target.classList.contains(cls.FORMAT) ||
            e.event.target.classList.contains(cls.CALC_EDIT) ||
            e.event.target.classList.contains(cls.CALC_EDITED)) {
            this.displayMenu(node.parentElement);
        }
    };
    /**
     * To display context menu.
     * @param  {HTMLElement} node
     * @returns void
     */
    CalculatedField.prototype.displayMenu = function (node) {
        if (document.querySelector('.' + this.parentID + 'calculatedmenu') !== null &&
            node.querySelector('.e-list-icon').classList.contains(cls.ICON) &&
            !node.querySelector('.e-list-icon').classList.contains(cls.CALC_EDITED) &&
            !node.querySelector('.e-list-icon').classList.contains(cls.CALC_EDIT) && node.tagName === 'LI') {
            this.menuObj.close();
            this.curMenu = node.querySelector('.' + cls.LIST_TEXT_CLASS);
            this.openContextMenu();
        }
        else if (node.querySelector('.e-list-icon').classList.contains(cls.CALC_EDIT) && node.tagName === 'LI') {
            addClass([node.querySelector('.e-list-icon')], cls.CALC_EDITED);
            removeClass([node.querySelector('.e-list-icon')], cls.CALC_EDIT);
            node.querySelector('.' + cls.CALC_EDITED).setAttribute('title', this.parent.localeObj.getConstant('clear'));
            this.isEdit = true;
            this.currentFieldName = node.getAttribute('data-field');
            this.inputObj.value = node.getAttribute('data-caption');
            this.dialog.element.querySelector('.' + cls.CALCINPUT).value = node.getAttribute('data-caption');
            document.querySelector('#' + this.parentID + 'droppable').value = node.getAttribute('data-uid');
        }
        else if (node.querySelector('.e-list-icon').classList.contains(cls.CALC_EDITED) && node.tagName === 'LI') {
            addClass([node.querySelector('.e-list-icon')], cls.CALC_EDIT);
            removeClass([node.querySelector('.e-list-icon')], cls.CALC_EDITED);
            node.querySelector('.' + cls.CALC_EDIT).setAttribute('title', this.parent.localeObj.getConstant('edit'));
            this.isEdit = false;
            this.inputObj.value = '';
            this.dialog.element.querySelector('.' + cls.CALCINPUT).value = '';
            document.querySelector('#' + this.parentID + 'droppable').value = '';
        }
    };
    /**
     * To set position for context menu.
     * @returns void
     */
    CalculatedField.prototype.openContextMenu = function () {
        var pos = this.curMenu.getBoundingClientRect();
        if (this.parent.enableRtl) {
            this.menuObj.open(pos.top + 30, pos.left - 100);
        }
        else {
            this.menuObj.open(pos.top + 30, pos.left + 150);
        }
    };
    /**
     * Triggers while select menu.
     * @param  {MenuEventArgs} menu
     * @returns void
     */
    CalculatedField.prototype.selectContextMenu = function (menu) {
        if (menu.element.textContent !== null) {
            var field = closest(this.curMenu, '.e-list-item').getAttribute('data-caption');
            closest(this.curMenu, '.e-list-item').setAttribute('data-type', menu.element.textContent);
            this.curMenu.textContent = field + ' (' + menu.element.textContent + ')';
            addClass([this.curMenu.parentElement.parentElement], ['e-node-focus', 'e-hover']);
            this.curMenu.parentElement.parentElement.setAttribute('tabindex', '-1');
            this.curMenu.parentElement.parentElement.focus();
        }
    };
    /**
     * To create context menu.
     * @returns void
     */
    CalculatedField.prototype.createMenu = function () {
        var menuItems = [
            { text: COUNT, },
            { text: AVG },
            { text: MIN },
            { text: MAX },
            { text: SUM },
            { text: DISTINCTCOUNT, },
            { text: PRODUCT },
            { text: STDEV },
            { text: STDEVP },
            { text: VAR },
            { text: VARP }
        ];
        var menuOptions = {
            cssClass: this.parentID + 'calculatedmenu',
            items: menuItems,
            enableRtl: this.parent.enableRtl,
            beforeOpen: this.beforeMenuOpen.bind(this),
            select: this.selectContextMenu.bind(this)
        };
        var contextMenu = createElement('ul', {
            id: this.parentID + 'contextmenu'
        });
        this.parent.element.appendChild(contextMenu);
        this.menuObj = new Menu(menuOptions);
        this.menuObj.isStringTemplate = true;
        this.menuObj.appendTo(contextMenu);
    };
    /**
     * Triggers while click OK button.
     * @returns void
     */
    CalculatedField.prototype.applyFormula = function () {
        var currentObj = this;
        var isExist = false;
        removeClass([document.getElementById(this.parentID + 'ddlelement')], cls.EMPTY_FIELD);
        Object.keys(currentObj.parent.engineModule.fieldList).forEach(function (key, index) {
            if (currentObj.inputObj.value && currentObj.inputObj.value === key &&
                currentObj.parent.engineModule.fieldList[key].aggregateType !== 'CalculatedField') {
                isExist = true;
            }
        });
        if (isExist) {
            currentObj.parent.pivotCommon.errorDialog.createErrorDialog(currentObj.parent.localeObj.getConstant('error'), currentObj.parent.localeObj.getConstant('fieldExist'));
            return;
        }
        this.newFields =
            extend([], this.parent.dataSourceSettings.calculatedFieldSettings, null, true);
        this.existingReport = extend({}, this.parent.dataSourceSettings, null, true);
        var report = this.parent.dataSourceSettings;
        var dropField = document.querySelector('#' + this.parentID + 'droppable');
        if (this.inputObj.value !== null && this.inputObj.value !== '' && dropField.value !== '') {
            var field = {
                name: this.inputObj.value,
                type: 'CalculatedField'
            };
            var cField = {
                name: this.inputObj.value,
                formula: dropField.value
            };
            this.isFieldExist = true;
            if (!this.isEdit) {
                for (var i = 0; i < report.values.length; i++) {
                    if (report.values[i].type === CALC && report.values[i].name === field.name) {
                        for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
                            if (report.calculatedFieldSettings[j].name === field.name) {
                                this.createConfirmDialog(currentObj.parent.localeObj.getConstant('alert'), currentObj.parent.localeObj.getConstant('confirmText'));
                                return;
                            }
                        }
                        this.isFieldExist = false;
                    }
                }
            }
            else {
                for (var i = 0; i < report.values.length; i++) {
                    if (report.values[i].type === CALC && this.currentFieldName !== null &&
                        report.values[i].name === this.currentFieldName && this.isEdit) {
                        for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
                            if (report.calculatedFieldSettings[j].name === this.currentFieldName) {
                                report.values[i].caption = this.inputObj.value;
                                report.calculatedFieldSettings[j].formula = dropField.value;
                                this.parent.engineModule.fieldList[this.currentFieldName].caption = this.inputObj.value;
                                this.isFieldExist = false;
                            }
                        }
                    }
                }
            }
            if (this.isFieldExist) {
                report.values.push(field);
                report.calculatedFieldSettings.push(cField);
            }
            this.parent.lastCalcFieldInfo = cField;
            this.addFormula(report, field.name);
        }
        else {
            if (this.inputObj.value === null || this.inputObj.value === '') {
                addClass([document.getElementById(this.parentID + 'ddlelement')], cls.EMPTY_FIELD);
                document.getElementById(this.parentID + 'ddlelement').focus();
            }
            else {
                this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('error'), this.parent.localeObj.getConstant('invalidFormula'));
            }
        }
    };
    CalculatedField.prototype.addFormula = function (report, field) {
        try {
            this.parent.setProperties({ dataSourceSettings: report }, true);
            if (this.parent.getModuleName() === 'pivotfieldlist' && this.parent.allowDeferLayoutUpdate) {
                this.parent.isRequiredUpdate = false;
            }
            this.parent.updateDataSource(false);
            this.isEdit = false;
            if (this.dialog) {
                this.dialog.close();
            }
            else {
                this.inputObj.value = '';
                this.formulaText = null;
                this.fieldText = null;
                this.parent.
                    dialogRenderer.parentElement.querySelector('.' + cls.CALCINPUT).value = '';
                this.parent.
                    dialogRenderer.parentElement.querySelector('#' + this.parentID + 'droppable').value = '';
            }
        }
        catch (exception) {
            if (this.parent.engineModule.fieldList[field]) {
                delete this.parent.engineModule.fieldList[field];
            }
            this.parent.pivotCommon.errorDialog.createErrorDialog(this.parent.localeObj.getConstant('error'), this.parent.localeObj.getConstant('invalidFormula'));
            this.parent.setProperties({ dataSourceSettings: this.existingReport }, true);
            this.parent.lastCalcFieldInfo = {};
            this.parent.updateDataSource(false);
        }
    };
    /**
     * To get treeview data
     * @param  {PivotGrid|PivotFieldList} parent
     * @returns Object
     */
    CalculatedField.prototype.getFieldListData = function (parent) {
        var fields = [];
        Object.keys(parent.engineModule.fieldList).forEach(function (key) {
            var type = null;
            if (parent.engineModule.fieldList[key].type === 'string' || parent.engineModule.fieldList[key].type === 'include' ||
                parent.engineModule.fieldList[key].type === 'exclude') {
                type = COUNT;
            }
            else {
                type = parent.engineModule.fieldList[key].aggregateType !== undefined ?
                    parent.engineModule.fieldList[key].aggregateType : SUM;
            }
            fields.push({
                index: parent.engineModule.fieldList[key].index,
                name: parent.engineModule.fieldList[key].caption + ' (' + type + ')',
                type: type,
                icon: cls.FORMAT + ' ' + cls.ICON,
                formula: parent.engineModule.fieldList[key].formula,
                field: key,
                caption: parent.engineModule.fieldList[key].caption ? parent.engineModule.fieldList[key].caption : key
            });
        });
        return fields;
    };
    /**
     * Triggers before menu opens.
     * @param  {BeforeOpenCloseMenuEventArgs} args
     * @returns void
     */
    CalculatedField.prototype.beforeMenuOpen = function (args) {
        args.element.style.zIndex = (this.dialog.zIndex + 1).toString();
        args.element.style.display = 'inline';
    };
    /**
     * Trigger while drop node in formula field.
     * @param  {DragAndDropEventArgs} args
     * @returns void
     */
    CalculatedField.prototype.fieldDropped = function (args) {
        args.cancel = true;
        var field = args.draggedNode.getAttribute('data-field');
        var type = args.draggedNode.getAttribute('data-type');
        var dropField = this.dialog.element.querySelector('#' + this.parentID + 'droppable');
        if (args.target.id === this.parentID + 'droppable' && dropField.value === '') {
            if (type === CALC) {
                dropField.value = args.draggedNodeData.id.toString();
            }
            else {
                dropField.value = '"' + type + '(' + field + ')' + '"';
            }
            dropField.focus();
        }
        else if (args.target.id === (this.parentID + 'droppable') && dropField.value !== '') {
            var textCovered = void 0;
            var cursorPos = dropField.selectionStart;
            var currentValue = dropField.value;
            var textBeforeText = currentValue.substring(0, cursorPos);
            var textAfterText = currentValue.substring(cursorPos, currentValue.length);
            if (type === CALC) {
                textCovered = textBeforeText + args.draggedNodeData.id.toString();
                dropField.value = textBeforeText + args.draggedNodeData.id.toString() + textAfterText;
            }
            else {
                textCovered = textBeforeText + '"' + type + '(' + field + ')' + '"';
                dropField.value = textBeforeText + '"' + type + '(' + field + ')' + '"' + textAfterText;
            }
            dropField.focus();
            dropField.setSelectionRange(textCovered.length, textCovered.length);
        }
        else {
            args.cancel = true;
        }
    };
    /**
     * To create dialog.
     * @returns void
     */
    CalculatedField.prototype.createDialog = function () {
        if (document.querySelector('#' + this.parentID + 'calculateddialog') !== null) {
            remove(document.querySelector('#' + this.parentID + 'calculateddialog'));
        }
        this.parent.element.appendChild(createElement('div', {
            id: this.parentID + 'calculateddialog',
            className: cls.CALCDIALOG
        }));
        this.dialog = new Dialog({
            allowDragging: true,
            position: { X: 'center', Y: 'center' },
            buttons: [
                {
                    click: this.applyFormula.bind(this),
                    buttonModel: {
                        content: this.parent.localeObj.getConstant('ok'),
                        isPrimary: true
                    }
                },
                {
                    click: this.cancelClick.bind(this),
                    buttonModel: {
                        content: this.parent.localeObj.getConstant('cancel')
                    }
                }
            ],
            close: this.closeDialog.bind(this),
            beforeOpen: this.beforeOpen.bind(this),
            animationSettings: { effect: 'Zoom' },
            width: '25%',
            isModal: false,
            closeOnEscape: true,
            enableRtl: this.parent.enableRtl,
            showCloseIcon: true,
            header: this.parent.localeObj.getConstant('createCalculatedField'),
            target: document.body
        });
        this.dialog.isStringTemplate = true;
        this.dialog.appendTo('#' + this.parentID + 'calculateddialog');
    };
    CalculatedField.prototype.cancelClick = function () {
        this.dialog.close();
        this.isEdit = false;
    };
    CalculatedField.prototype.beforeOpen = function (args) {
        this.dialog.element.querySelector('.e-dlg-header').innerHTML = this.parent.localeObj.getConstant('createCalculatedField');
        this.dialog.element.querySelector('.e-dlg-header').
            setAttribute('title', this.parent.localeObj.getConstant('createCalculatedField'));
    };
    CalculatedField.prototype.closeDialog = function (args) {
        if (this.parent.getModuleName() === 'pivotfieldlist') {
            this.parent.axisFieldModule.render();
            if (this.parent.renderMode !== 'Fixed') {
                addClass([this.parent.element.querySelector('.' + cls.TOGGLE_FIELD_LIST_CLASS)], cls.ICON_HIDDEN);
                this.parent.dialogRenderer.fieldListDialog.show();
            }
        }
        this.treeObj.destroy();
        this.dialog.destroy();
        this.newFields = null;
        remove(document.getElementById(this.parentID + 'calculateddialog'));
        remove(document.querySelector('.' + this.parentID + 'calculatedmenu'));
    };
    /**
     * To render dialog elements.
     * @returns void
     */
    CalculatedField.prototype.renderDialogElements = function () {
        var outerDiv = createElement('div', { id: this.parentID + 'outerDiv', className: cls.CALCOUTERDIV });
        if (this.parent.getModuleName() === 'pivotfieldlist' && this.parent.
            dialogRenderer.parentElement.querySelector('.' + cls.FORMULA) !== null && this.parent.isAdaptive) {
            var accordDiv = createElement('div', { id: this.parentID + 'accordDiv', className: cls.CALCACCORD });
            outerDiv.appendChild(accordDiv);
            var buttonDiv = createElement('div', { id: this.parentID + 'buttonDiv', className: cls.CALCBUTTONDIV });
            var addBtn = createElement('button', {
                id: this.parentID + 'addBtn', innerHTML: this.parent.localeObj.getConstant('add'),
                className: cls.CALCADDBTN
            });
            var cancelBtn = createElement('button', {
                id: this.parentID + 'cancelBtn', innerHTML: this.parent.localeObj.getConstant('cancel'),
                className: cls.CALCCANCELBTN
            });
            buttonDiv.appendChild(cancelBtn);
            buttonDiv.appendChild(addBtn);
            outerDiv.appendChild(buttonDiv);
        }
        else {
            var inputDiv = createElement('div', { id: this.parentID + 'outerDiv', className: cls.CALCINPUTDIV });
            var inputObj = createElement('input', {
                id: this.parentID + 'ddlelement',
                attrs: { 'type': 'text', 'tabindex': '1' },
                className: cls.CALCINPUT
            });
            inputDiv.appendChild(inputObj);
            outerDiv.appendChild(inputDiv);
            if (!this.parent.isAdaptive) {
                var fieldTitle = createElement('div', {
                    className: cls.PIVOT_ALL_FIELD_TITLE_CLASS,
                    innerHTML: this.parent.localeObj.getConstant('formulaField')
                });
                outerDiv.appendChild(fieldTitle);
            }
            var wrapDiv = createElement('div', { id: this.parentID + 'control_wrapper', className: cls.TREEVIEWOUTER });
            wrapDiv.appendChild(createElement('div', { id: this.parentID + 'tree', className: cls.TREEVIEW }));
            outerDiv.appendChild(wrapDiv);
            if (!this.parent.isAdaptive) {
                var formulaTitle = createElement('div', {
                    className: cls.PIVOT_FORMULA_TITLE_CLASS,
                    innerHTML: this.parent.localeObj.getConstant('formula')
                });
                outerDiv.appendChild(formulaTitle);
            }
            var dropDiv = createElement('textarea', {
                id: this.parentID + 'droppable',
                className: cls.FORMULA,
                attrs: {
                    'placeholder': this.parent.isAdaptive ? this.parent.localeObj.getConstant('dropTextMobile') :
                        this.parent.localeObj.getConstant('dropText')
                }
            });
            outerDiv.appendChild(dropDiv);
            if (this.parent.isAdaptive) {
                var buttonDiv = createElement('div', { id: this.parentID + 'buttonDiv', className: cls.CALCBUTTONDIV });
                var okBtn = createElement('button', {
                    id: this.parentID + 'okBtn', innerHTML: this.parent.localeObj.getConstant('apply'),
                    className: cls.CALCOKBTN
                });
                buttonDiv.appendChild(okBtn);
                outerDiv.appendChild(buttonDiv);
            }
        }
        return outerDiv;
    };
    /**
     * To create calculated field adaptive layout.
     * @returns void
     */
    CalculatedField.prototype.renderAdaptiveLayout = function () {
        if (document.querySelector('#' + this.parentID + 'droppable')) {
            this.formulaText = document.querySelector('#' + this.parentID + 'droppable').value;
            this.fieldText = this.inputObj.value;
        }
        this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
    };
    /**
     * To create treeview.
     * @returns void
     */
    CalculatedField.prototype.createTreeView = function () {
        this.treeObj = new TreeView({
            fields: { dataSource: this.getFieldListData(this.parent), id: 'formula', text: 'name', iconCss: 'icon' },
            allowDragAndDrop: true,
            enableRtl: this.parent.enableRtl,
            nodeCollapsing: this.nodeCollapsing.bind(this),
            nodeDragStart: this.dragStart.bind(this),
            nodeClicked: this.fieldClickHandler.bind(this),
            nodeDragStop: this.fieldDropped.bind(this),
            drawNode: this.drawTreeNode.bind(this),
            sortOrder: 'Ascending'
        });
        this.treeObj.isStringTemplate = true;
        this.treeObj.appendTo('#' + this.parentID + 'tree');
    };
    CalculatedField.prototype.nodeCollapsing = function (args) {
        args.cancel = true;
    };
    CalculatedField.prototype.dragStart = function (args) {
        if (args.event.target.classList.contains(cls.DRAG_CLASS)) {
            var dragItem = document.querySelector('.e-drag-item.e-treeview');
            addClass([dragItem], cls.PIVOTCALC);
            dragItem.style.zIndex = (this.dialog.zIndex + 1).toString();
            dragItem.style.display = 'inline';
        }
        else {
            args.cancel = true;
        }
    };
    /**
     * Trigger before treeview text append.
     * @param  {DrawNodeEventArgs} args
     * @returns void
     */
    CalculatedField.prototype.drawTreeNode = function (args) {
        var field = args.nodeData.field;
        args.node.setAttribute('data-field', field);
        args.node.setAttribute('data-caption', args.nodeData.caption);
        args.node.setAttribute('data-type', args.nodeData.type);
        var dragElement = createElement('span', {
            attrs: { 'tabindex': '-1', 'aria-disabled': 'false', 'title': this.parent.localeObj.getConstant('dragField') },
            className: cls.ICON + ' e-drag'
        });
        prepend([dragElement], args.node.querySelector('.' + cls.TEXT_CONTENT_CLASS));
        append([args.node.querySelector('.' + cls.FORMAT)], args.node.querySelector('.' + cls.TEXT_CONTENT_CLASS));
        if (this.parent.engineModule.fieldList[field].type !== 'number' &&
            this.parent.engineModule.fieldList[field].aggregateType !== CALC) {
            removeClass([args.node.querySelector('.' + cls.FORMAT)], cls.ICON);
        }
        else {
            args.node.querySelector('.' + cls.FORMAT).setAttribute('title', this.parent.localeObj.getConstant('format'));
        }
        if (this.parent.engineModule.fieldList[field].aggregateType === CALC) {
            args.node.querySelector('.' + cls.FORMAT).setAttribute('title', this.parent.localeObj.getConstant('edit'));
            addClass([args.node.querySelector('.' + cls.FORMAT)], cls.CALC_EDIT);
            removeClass([args.node.querySelector('.' + cls.FORMAT)], cls.FORMAT);
        }
    };
    /**
     * To create radio buttons.
     * @param  {string} key
     * @returns HTMLElement
     */
    CalculatedField.prototype.createTypeContainer = function (key) {
        var wrapDiv = createElement('div', { id: this.parentID + 'control_wrapper', className: cls.TREEVIEWOUTER });
        var type = [SUM, COUNT, AVG, MIN, MAX, DISTINCTCOUNT, PRODUCT, STDEV, STDEVP, VAR, VARP];
        for (var i = 0; i < type.length; i++) {
            var input = createElement('input', {
                id: this.parentID + 'radio' + key + type[i],
                attrs: { 'type': 'radio', 'data-ftxt': key },
                className: cls.CALCRADIO
            });
            wrapDiv.appendChild(input);
        }
        return wrapDiv;
    };
    /**
     * To get Accordion Data.
     * @param  {PivotView | PivotFieldList} parent
     * @returns AccordionItemModel
     */
    CalculatedField.prototype.getAccordionData = function (parent) {
        var _this = this;
        var data = [];
        Object.keys(parent.engineModule.fieldList).forEach(function (key, index) {
            data.push({
                header: '<input id=' + _this.parentID + '_' + index + ' class=' + cls.CALCCHECK + ' type="checkbox" data-field=' +
                    key + ' data-caption=' + _this.parent.engineModule.fieldList[key].caption + ' data-type=' +
                    _this.parent.engineModule.fieldList[key].type + '/>',
                content: parent.engineModule.fieldList[key].aggregateType === CALC ||
                    _this.parent.engineModule.fieldList[key].type !== 'number' ? '' : _this.createTypeContainer(key).outerHTML
            });
        });
        return data;
    };
    /**
     * To render mobile layout.
     * @param  {Tab} tabObj
     * @returns void
     */
    CalculatedField.prototype.renderMobileLayout = function (tabObj) {
        tabObj.items[4].content = this.renderDialogElements().outerHTML;
        tabObj.dataBind();
        var cancelBtn = new Button({ cssClass: cls.FLAT, isPrimary: true });
        cancelBtn.isStringTemplate = true;
        cancelBtn.appendTo('#' + this.parentID + 'cancelBtn');
        if (cancelBtn.element) {
            cancelBtn.element.onclick = this.cancelBtnClick.bind(this);
        }
        if (this.parent.
            dialogRenderer.parentElement.querySelector('.' + cls.FORMULA) !== null && this.parent.isAdaptive) {
            var okBtn = new Button({ cssClass: cls.FLAT + ' ' + cls.OUTLINE_CLASS, isPrimary: true });
            okBtn.isStringTemplate = true;
            okBtn.appendTo('#' + this.parentID + 'okBtn');
            this.inputObj = new MaskedTextBox({
                placeholder: this.parent.localeObj.getConstant('fieldName')
            });
            this.inputObj.isStringTemplate = true;
            this.inputObj.appendTo('#' + this.parentID + 'ddlelement');
            if (this.formulaText !== null && this.parent.
                dialogRenderer.parentElement.querySelector('#' + this.parentID + 'droppable') !== null) {
                var drop = this.parent.
                    dialogRenderer.parentElement.querySelector('#' + this.parentID + 'droppable');
                drop.value = this.formulaText;
            }
            if (this.fieldText !== null && this.parent.
                dialogRenderer.parentElement.querySelector('.' + cls.CALCINPUT) !== null) {
                this.parent.
                    dialogRenderer.parentElement.querySelector('.' + cls.CALCINPUT).value = this.fieldText;
                this.inputObj.value = this.fieldText;
            }
            if (okBtn.element) {
                okBtn.element.onclick = this.applyFormula.bind(this);
            }
        }
        else if (this.parent.isAdaptive) {
            var accordion = new Accordion({
                items: this.getAccordionData(this.parent),
                enableRtl: this.parent.enableRtl,
                expanding: this.accordionExpand.bind(this),
            });
            var addBtn = new Button({ cssClass: cls.FLAT, isPrimary: true });
            addBtn.isStringTemplate = true;
            addBtn.appendTo('#' + this.parentID + 'addBtn');
            accordion.isStringTemplate = true;
            accordion.appendTo('#' + this.parentID + 'accordDiv');
            Object.keys(this.parent.engineModule.fieldList).forEach(this.updateType.bind(this));
            if (addBtn.element) {
                addBtn.element.onclick = this.addBtnClick.bind(this);
            }
        }
    };
    CalculatedField.prototype.accordionExpand = function (args) {
        var _this = this;
        if (args.element.querySelectorAll('.e-radio-wrapper').length === 0) {
            Object.keys(this.parent.engineModule.fieldList).forEach(function (key) {
                var type = [SUM, COUNT, AVG, MIN, MAX, DISTINCTCOUNT, PRODUCT, STDEV, STDEVP, VAR, VARP];
                var radiobutton;
                if (key === args.element.querySelector('[data-field').getAttribute('data-field')) {
                    for (var i = 0; i < type.length; i++) {
                        radiobutton = new RadioButton({
                            label: type[i],
                            name: AGRTYPE + key,
                            change: _this.onChange.bind(_this),
                        });
                        radiobutton.isStringTemplate = true;
                        radiobutton.appendTo('#' + _this.parentID + 'radio' + key + type[i]);
                    }
                }
            });
        }
    };
    CalculatedField.prototype.onChange = function (args) {
        var type = args.event.target.parentElement.querySelector('.e-label').
            innerText;
        var field = args.event.target.closest('.e-acrdn-item').
            querySelector('[data-field').getAttribute('data-caption');
        args.event.target.
            closest('.e-acrdn-item').querySelector('.e-label').
            innerText = field + ' (' + type + ')';
        args.event.target.closest('.e-acrdn-item').
            querySelector('[data-type').setAttribute('data-type', type);
    };
    CalculatedField.prototype.updateType = function (key, index) {
        var type = null;
        if (this.parent.engineModule.fieldList[key].type === 'string' ||
            this.parent.engineModule.fieldList[key].type === 'include' ||
            this.parent.engineModule.fieldList[key].type === 'exclude') {
            type = COUNT;
        }
        else {
            type = this.parent.engineModule.fieldList[key].aggregateType !== undefined ?
                this.parent.engineModule.fieldList[key].aggregateType : SUM;
        }
        var checkbox = new CheckBox({
            label: this.parent.engineModule.fieldList[key].caption + ' (' + type + ')'
        });
        checkbox.isStringTemplate = true;
        checkbox.appendTo('#' + this.parentID + '_' + index);
        document.querySelector('#' + this.parentID + '_' + index).setAttribute('data-field', key);
        document.querySelector('#' + this.parentID + '_' + index).setAttribute('data-type', type);
    };
    /**
     * Trigger while click cancel button.
     * @returns void
     */
    CalculatedField.prototype.cancelBtnClick = function () {
        this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
    };
    /**
     * Trigger while click add button.
     * @returns void
     */
    CalculatedField.prototype.addBtnClick = function () {
        var node = document.querySelectorAll('.e-accordion .e-check');
        var fieldText = '';
        var field = null;
        var type = null;
        for (var i = 0; i < node.length; i++) {
            field = node[i].parentElement.querySelector('[data-field]').getAttribute('data-field');
            type = node[i].parentElement.querySelector('[data-field]').getAttribute('data-type');
            if (type.indexOf(CALC) === -1) {
                fieldText = fieldText + ('"' + type + '(' + field + ')' + '"');
            }
            else {
                for (var j = 0; j < this.parent.dataSourceSettings.calculatedFieldSettings.length; j++) {
                    if (this.parent.dataSourceSettings.calculatedFieldSettings[j].name === field) {
                        fieldText = fieldText + this.parent.dataSourceSettings.calculatedFieldSettings[j].formula;
                        break;
                    }
                }
            }
        }
        this.formulaText = this.formulaText !== null ? (this.formulaText + fieldText) : fieldText;
        this.renderMobileLayout(this.parent.dialogRenderer.adaptiveElement);
    };
    /**
     * To create calculated field dialog elements.
     * @returns void
     * @hidden
     */
    CalculatedField.prototype.createCalculatedFieldDialog = function () {
        if (this.parent.isAdaptive && this.parent.getModuleName() === 'pivotfieldlist') {
            this.renderAdaptiveLayout();
        }
        else if (!this.parent.isAdaptive) {
            this.renderDialogLayout();
            this.dialog.element.style.top = parseInt(this.dialog.element.style.top, 10) < 0 ? '0px' : this.dialog.element.style.top;
        }
    };
    /**
     * To create calculated field desktop layout.
     * @returns void
     */
    CalculatedField.prototype.renderDialogLayout = function () {
        this.newFields =
            extend([], this.parent.dataSourceSettings.calculatedFieldSettings, null, true);
        this.createDialog();
        this.dialog.content = this.renderDialogElements();
        this.dialog.refresh();
        this.inputObj = new MaskedTextBox({
            placeholder: this.parent.localeObj.getConstant('fieldName')
        });
        this.inputObj.isStringTemplate = true;
        this.inputObj.appendTo('#' + this.parentID + 'ddlelement');
        this.createTreeView();
        this.createMenu();
        this.droppable = new Droppable(this.dialog.element.querySelector('#' + this.parentID + 'droppable'));
        this.keyboardEvents = new KeyboardEvents(this.parent.calculatedFieldModule.dialog.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: { moveRight: 'rightarrow', enter: 'enter' },
            eventName: 'keydown'
        });
    };
    /**
     * Creates the error dialog for the unexpected action done.
     * @method createConfirmDialog
     * @return {void}
     * @hidden
     */
    CalculatedField.prototype.createConfirmDialog = function (title, description) {
        var errorDialog = createElement('div', {
            id: this.parentID + '_ErrorDialog',
            className: cls.ERROR_DIALOG_CLASS
        });
        this.parent.element.appendChild(errorDialog);
        this.confirmPopUp = new Dialog({
            animationSettings: { effect: 'Fade' },
            allowDragging: false,
            showCloseIcon: true,
            enableRtl: this.parent.enableRtl,
            width: 'auto',
            height: 'auto',
            position: { X: 'center', Y: 'center' },
            buttons: [
                {
                    click: this.replaceFormula.bind(this),
                    buttonModel: {
                        cssClass: cls.OK_BUTTON_CLASS + ' ' + cls.OUTLINE_CLASS,
                        content: this.parent.localeObj.getConstant('ok'), isPrimary: true
                    }
                },
                {
                    click: this.removeErrorDialog.bind(this),
                    buttonModel: {
                        cssClass: cls.CANCEL_BUTTON_CLASS,
                        content: this.parent.localeObj.getConstant('cancel'), isPrimary: true
                    }
                }
            ],
            header: title,
            content: description,
            isModal: true,
            visible: true,
            closeOnEscape: true,
            target: document.body,
            close: this.removeErrorDialog.bind(this)
        });
        this.confirmPopUp.isStringTemplate = true;
        this.confirmPopUp.appendTo(errorDialog);
        this.confirmPopUp.element.querySelector('.e-dlg-header').innerHTML = title;
    };
    CalculatedField.prototype.replaceFormula = function () {
        var report = this.parent.dataSourceSettings;
        var dropField = document.querySelector('#' + this.parentID + 'droppable');
        for (var i = 0; i < report.values.length; i++) {
            if (report.values[i].type === CALC && report.values[i].name === this.inputObj.value) {
                for (var j = 0; j < report.calculatedFieldSettings.length; j++) {
                    if (report.calculatedFieldSettings[j].name === this.inputObj.value) {
                        report.calculatedFieldSettings[j].formula = dropField.value;
                        this.parent.lastCalcFieldInfo = report.calculatedFieldSettings[j];
                    }
                }
            }
        }
        this.addFormula(report, this.inputObj.value);
        this.removeErrorDialog();
    };
    CalculatedField.prototype.removeErrorDialog = function () {
        if (document.getElementById(this.parentID + '_ErrorDialog')) {
            remove(document.getElementById(this.parentID + '_ErrorDialog').parentElement);
        }
    };
    /**
     * To add event listener.
     * @returns void
     * @hidden
     */
    CalculatedField.prototype.addEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(events.initCalculatedField, this.createCalculatedFieldDialog, this);
    };
    /**
     * To remove event listener.
     * @returns void
     * @hidden
     */
    CalculatedField.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.initCalculatedField, this.createCalculatedFieldDialog);
    };
    /**
     * To destroy the calculated field dialog
     * @returns void
     * @hidden
     */
    CalculatedField.prototype.destroy = function () {
        this.removeEventListener();
    };
    return CalculatedField;
}());
export { CalculatedField };
