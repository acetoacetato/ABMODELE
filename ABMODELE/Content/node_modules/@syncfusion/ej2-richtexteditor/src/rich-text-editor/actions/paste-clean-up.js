import * as events from '../base/constant';
import { RadioButton } from '@syncfusion/ej2-buttons';
import { isNullOrUndefined as isNOU, isNullOrUndefined, detach } from '@syncfusion/ej2-base';
import { CLS_RTE_PASTE_KEEP_FORMAT, CLS_RTE_PASTE_REMOVE_FORMAT, CLS_RTE_PASTE_PLAIN_FORMAT } from '../base/classes';
import { CLS_RTE_PASTE_OK, CLS_RTE_PASTE_CANCEL, CLS_RTE_DIALOG_MIN_HEIGHT } from '../base/classes';
import { pasteCleanupGroupingTags } from '../../common/config';
import { NodeSelection } from '../../selection/selection';
import * as EVENTS from './../../common/constant';
import { RenderType } from '../base/enum';
/**
 * PasteCleanup module called when pasting content in RichTextEditor
 */
var PasteCleanup = /** @class */ (function () {
    function PasteCleanup(parent, serviceLocator) {
        this.inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'button',
            'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img', 'input',
            'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress',
            'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg',
            'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.i10n = serviceLocator.getService('rteLocale');
        this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
        this.addEventListener();
    }
    PasteCleanup.prototype.addEventListener = function () {
        this.nodeSelectionObj = new NodeSelection();
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(events.pasteClean, this.pasteClean, this);
        this.parent.on(events.destroy, this.destroy, this);
    };
    PasteCleanup.prototype.destroy = function () {
        this.removeEventListener();
    };
    PasteCleanup.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.pasteClean, this.pasteClean);
        this.parent.off(events.destroy, this.destroy);
    };
    PasteCleanup.prototype.pasteClean = function (e) {
        var _this = this;
        var args = {
            requestType: 'Paste',
            editorMode: this.parent.editorMode,
            event: e
        };
        var value = null;
        var imageproperties;
        if (e.args && !isNOU(e.args.clipboardData)) {
            value = e.args.clipboardData.getData('text/html');
        }
        if (e.args && value !== null && this.parent.editorMode === 'HTML') {
            if (value.length === 0) {
                value = e.args.clipboardData.getData('text/plain');
                var file = e && e.args.clipboardData &&
                    e.args.clipboardData.items.length > 0 ?
                    e.args.clipboardData.items[0].getAsFile() : null;
                this.parent.notify(events.paste, {
                    file: file,
                    args: e.args,
                    text: value,
                    callBack: function (b) {
                        imageproperties = b;
                        if (typeof (imageproperties) === 'object') {
                            _this.parent.formatter.editorManager.execCommand('Images', 'Image', e.args, _this.imageFormatting.bind(_this), 'pasteCleanup', imageproperties, 'pasteCleanupModule');
                        }
                        else {
                            value = imageproperties;
                        }
                    }
                });
                var htmlRegex = new RegExp(/<\/[a-z][\s\S]*>/i);
                if (!htmlRegex.test(value)) {
                    var enterSplitText = value.split('\n');
                    var contentInnerElem = '';
                    for (var i = 0; i < enterSplitText.length; i++) {
                        if (enterSplitText[i].trim() === '') {
                            contentInnerElem += '<p><br></p>';
                        }
                        else {
                            var contentWithSpace = '';
                            var spaceBetweenContent = true;
                            var spaceSplit = enterSplitText[i].split(' ');
                            for (var j = 0; j < spaceSplit.length; j++) {
                                if (spaceSplit[j].trim() === '') {
                                    contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ';
                                }
                                else {
                                    spaceBetweenContent = false;
                                    contentWithSpace += spaceSplit[j] + ' ';
                                }
                            }
                            contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';
                        }
                    }
                    var divElement = this.parent.createElement('div');
                    divElement.innerHTML = contentInnerElem;
                    value = divElement.innerHTML;
                }
            }
            else if (value.length > 0) {
                this.parent.formatter.editorManager.observer.notify(EVENTS.MS_WORD_CLEANUP, {
                    args: e.args,
                    text: e.text,
                    allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,
                    callBack: function (a) {
                        value = a;
                    }
                });
            }
            this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
            var currentDocument = this.contentRenderer.getDocument();
            var range = this.nodeSelectionObj.getRange(currentDocument);
            this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
            if (this.parent.pasteCleanupSettings.prompt) {
                e.args.preventDefault();
                this.pasteDialog(value);
            }
            else if (this.parent.pasteCleanupSettings.plainText) {
                e.args.preventDefault();
                this.plainFormatting(value);
            }
            else if (this.parent.pasteCleanupSettings.keepFormat) {
                e.args.preventDefault();
                this.formatting(value, false);
            }
            else {
                e.args.preventDefault();
                this.formatting(value, true);
            }
        }
        setTimeout(function () { _this.parent.formatter.onSuccess(_this.parent, args); }, 0);
    };
    /**
     * Method for image formatting when pasting
     * @hidden
     */
    PasteCleanup.prototype.imageFormatting = function (imgElement) {
        var imageElement = this.parent.createElement('span');
        imageElement.appendChild(imgElement.elements);
        var imageValue = imageElement.innerHTML;
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        var currentDocument = this.contentRenderer.getDocument();
        var range = this.nodeSelectionObj.getRange(currentDocument);
        this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
        if (this.parent.pasteCleanupSettings.prompt) {
            this.pasteDialog(imageValue);
        }
        else if (this.parent.pasteCleanupSettings.plainText) {
            this.plainFormatting(imageValue);
        }
        else if (this.parent.pasteCleanupSettings.keepFormat) {
            this.formatting(imageValue, false);
        }
        else {
            this.formatting(imageValue, true);
        }
    };
    PasteCleanup.prototype.radioRender = function () {
        var keepRadioButton = new RadioButton({ label: 'Keep', name: 'pasteOption', checked: true });
        keepRadioButton.isStringTemplate = true;
        var keepFormatElement = this.parent.element.querySelector('#keepFormating');
        keepRadioButton.appendTo(keepFormatElement);
        var cleanRadioButton = new RadioButton({ label: 'Clean', name: 'pasteOption' });
        cleanRadioButton.isStringTemplate = true;
        var cleanFormatElement = this.parent.element.querySelector('#cleanFormat');
        cleanRadioButton.appendTo(cleanFormatElement);
        var plainTextRadioButton = new RadioButton({ label: 'Plain Text', name: 'pasteOption' });
        plainTextRadioButton.isStringTemplate = true;
        var plainTextElement = this.parent.element.querySelector('#plainTextFormat');
        plainTextRadioButton.appendTo(plainTextElement);
    };
    PasteCleanup.prototype.selectFormatting = function (value) {
        var keepFormatElement = this.parent.element.querySelector('#keepFormating');
        var cleanFormatElement = this.parent.element.querySelector('#cleanFormat');
        if (keepFormatElement.checked) {
            this.formatting(value, false);
        }
        else if (cleanFormatElement.checked) {
            this.formatting(value, true);
        }
        else {
            this.plainFormatting(value);
        }
    };
    PasteCleanup.prototype.pasteDialog = function (value) {
        var _this = this;
        var dialogModel = {
            buttons: [
                {
                    click: function () {
                        if (!dialog.isDestroyed) {
                            _this.selectFormatting(value);
                            dialog.hide();
                            _this.dialogRenderObj.close(dialog);
                            dialog.destroy();
                        }
                    },
                    buttonModel: {
                        isPrimary: true,
                        cssClass: 'e-flat ' + CLS_RTE_PASTE_OK,
                        content: this.i10n.getConstant('pasteDialogOk')
                    }
                },
                {
                    click: function () {
                        if (!dialog.isDestroyed) {
                            dialog.hide();
                            _this.dialogRenderObj.close(dialog);
                            dialog.destroy();
                        }
                    },
                    buttonModel: {
                        cssClass: 'e-flat ' + CLS_RTE_PASTE_CANCEL,
                        content: this.i10n.getConstant('pasteDialogCancel')
                    }
                }
            ],
            header: this.i10n.getConstant('pasteFormat'),
            content: this.i10n.getConstant('pasteFormatContent') + '<br/><div><div style="padding-top:24px;">' +
                '<input type="radio" class="' + CLS_RTE_PASTE_KEEP_FORMAT + '" id="keepFormating"/>' +
                '</div><div style="padding-top:20px;"><input type="radio" class="' + CLS_RTE_PASTE_REMOVE_FORMAT + '" id="cleanFormat"/></div>' +
                '<div style="padding-top:20px;"><input type="radio" class="' + CLS_RTE_PASTE_PLAIN_FORMAT + '" id="plainTextFormat"/></div></div>',
            target: this.parent.element,
            width: '300px',
            height: '265px',
            cssClass: CLS_RTE_DIALOG_MIN_HEIGHT,
            isModal: true
        };
        var dialog = this.dialogRenderObj.render(dialogModel);
        var rteDialogWrapper = this.parent.element.querySelector('#' + this.parent.getID()
            + '_pasteCleanupDialog');
        if (rteDialogWrapper !== null && rteDialogWrapper.innerHTML !== '') {
            this.destroyDialog(rteDialogWrapper);
        }
        if (rteDialogWrapper === null) {
            rteDialogWrapper = this.parent.createElement('div', {
                id: this.parent.getID() + '_pasteCleanupDialog'
            });
            this.parent.element.appendChild(rteDialogWrapper);
        }
        dialog.appendTo(rteDialogWrapper);
        this.radioRender();
        dialog.show();
    };
    PasteCleanup.prototype.destroyDialog = function (rteDialogWrapper) {
        var rteDialogContainer = this.parent.element.querySelector('.e-dlg-container');
        detach(rteDialogContainer);
        var rteDialogWrapperChildLength = rteDialogWrapper.children.length;
        for (var i = 0; i < rteDialogWrapperChildLength; i++) {
            detach(rteDialogWrapper.children[0]);
        }
    };
    PasteCleanup.prototype.formatting = function (value, clean) {
        var clipBoardElem = this.parent.createElement('div', { className: 'pasteContent', styles: 'display:inline;' });
        clipBoardElem.innerHTML = value;
        if (this.parent.pasteCleanupSettings.deniedTags !== null) {
            clipBoardElem = this.deniedTags(clipBoardElem);
        }
        if (clean) {
            clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
        }
        else if (this.parent.pasteCleanupSettings.deniedAttrs !== null) {
            clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
        }
        if (this.parent.pasteCleanupSettings.allowedStyleProps !== null) {
            clipBoardElem = this.allowedStyle(clipBoardElem);
        }
        this.saveSelection.restore();
        this.parent.executeCommand('insertHTML', clipBoardElem);
        this.parent.notify(events.toolbarRefresh, {});
    };
    //Plain Formatting
    PasteCleanup.prototype.plainFormatting = function (value) {
        var clipBoardElem = this.parent.createElement('div');
        clipBoardElem.innerHTML = value;
        this.detachInlineElements(clipBoardElem);
        var text = this.getTextContent(clipBoardElem);
        var resultElement = this.parent.createElement('div', { className: 'pasteContent', styles: 'display:inline;' });
        resultElement.innerHTML = text;
        this.saveSelection.restore();
        this.parent.executeCommand('insertHTML', resultElement);
    };
    PasteCleanup.prototype.detachInlineElements = function (element) {
        while (!isNullOrUndefined(element)) {
            var isInlineElement = false;
            for (var j = 0; j < this.inlineNode.length && !isInlineElement; j++) {
                if (element.tagName.toLocaleLowerCase() === this.inlineNode[j]) {
                    var node = element.nextElementSibling ?
                        element.nextElementSibling : element.parentElement.nextElementSibling;
                    if (!isNullOrUndefined(element.childNodes[0]) && element.childNodes[0].textContent !== '') {
                        element.parentElement.insertBefore(this.getTextNode(element), element);
                    }
                    detach(element);
                    element = node;
                    isInlineElement = true;
                }
            }
            if (!isNullOrUndefined(element)) {
                if (isInlineElement) {
                    element = element;
                }
                else if (element.firstElementChild) {
                    element = element.firstElementChild;
                }
                else if (element.nextElementSibling) {
                    element = element.nextElementSibling;
                }
                else if (!isNOU(element.parentElement) && element.parentElement.nextElementSibling) {
                    element = element.parentElement.nextElementSibling;
                }
                else {
                    element = null;
                }
            }
            else {
                element = null;
            }
        }
    };
    PasteCleanup.prototype.getTextNode = function (element) {
        var rootElement = this.parent.createElement('span');
        rootElement.innerHTML = element.textContent;
        return rootElement.childNodes[0];
    };
    PasteCleanup.prototype.insertAfter = function (newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };
    PasteCleanup.prototype.getTextContent = function (element) {
        var result;
        var text;
        result = '';
        var brElement = element.nodeType === 1 ? element.querySelectorAll('br') : null;
        if (brElement) {
            for (var i = 0; i < brElement.length; i++) {
                if (!isNullOrUndefined(brElement[i].previousSibling)) {
                    var resultElement = this.parent.createElement('div');
                    resultElement.innerHTML = brElement[i].previousSibling.textContent;
                    detach(brElement[i].previousSibling);
                    brElement[i].parentElement.insertBefore(resultElement, brElement[i]);
                }
                if (i + 1 === brElement.length && !isNullOrUndefined(brElement[i].nextSibling)) {
                    var divNextElement = this.parent.createElement('div');
                    divNextElement.innerHTML = brElement[i].nextSibling.textContent;
                    detach(brElement[i].nextSibling);
                    this.insertAfter(divNextElement, brElement[i]);
                }
                detach(brElement[i]);
            }
        }
        if (element.children.length === 0 && element.textContent.trim() !== '') {
            text = '<p>' + element.textContent + '</p>';
            result += text;
        }
        else {
            for (var i = 0; i < element.children.length; i++) {
                if (!isNullOrUndefined(element.children[i])) {
                    text = this.getTextContent(element.children[i]);
                }
                else {
                    text = '<p>' + element.children[i].textContent + '</p>';
                }
                result += text;
            }
        }
        return result;
    };
    //GroupingTags
    PasteCleanup.prototype.tagGrouping = function (deniedTags) {
        var groupingTags = deniedTags.slice();
        var keys = Object.keys(pasteCleanupGroupingTags);
        var values = keys.map(function (key) { return pasteCleanupGroupingTags[key]; });
        var addTags = [];
        for (var i = 0; i < groupingTags.length; i++) {
            //The value split using '[' because to reterive the tag name from the user given format which may contain tag with attributes
            if (groupingTags[i].split('[').length > 1) {
                groupingTags[i] = groupingTags[i].split('[')[0].trim();
            }
            if (keys.indexOf(groupingTags[i]) > -1) {
                for (var j = 0; j < values[keys.indexOf(groupingTags[i])].length; j++) {
                    if (groupingTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0 &&
                        addTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0) {
                        addTags.push(values[keys.indexOf(groupingTags[i])][j]);
                    }
                }
            }
        }
        return deniedTags = deniedTags.concat(addTags);
    };
    //Filter Attributes in Denied Tags
    PasteCleanup.prototype.attributesfilter = function (deniedTags) {
        for (var i = 0; i < deniedTags.length; i++) {
            if (deniedTags[i].split('[').length > 1) {
                var userAttributes = deniedTags[i].split('[')[1].split(']')[0].split(',');
                var allowedAttributeArray = [];
                var deniedAttributeArray = [];
                for (var j = 0; j < userAttributes.length; j++) {
                    userAttributes[j].indexOf('!') < 0 ? allowedAttributeArray.push(userAttributes[j].trim())
                        : deniedAttributeArray.push(userAttributes[j].split('!')[1].trim());
                }
                var allowedAttribute = allowedAttributeArray.length > 1 ?
                    (allowedAttributeArray.join('][')) : (allowedAttributeArray.join());
                var deniedAttribute = deniedAttributeArray.length > 1 ? deniedAttributeArray.join('][') : (deniedAttributeArray.join());
                if (deniedAttribute.length > 0) {
                    var select = allowedAttribute !== '' ? deniedTags[i].split('[')[0] +
                        '[' + allowedAttribute + ']' : deniedTags[i].split('[')[0];
                    deniedTags[i] = select + ':not([' + deniedAttribute + '])';
                }
                else {
                    deniedTags[i] = deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']';
                }
            }
        }
        return deniedTags;
    };
    //Denied Tags
    PasteCleanup.prototype.deniedTags = function (clipBoardElem) {
        var deniedTags = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedTags) ? [] : this.parent.pasteCleanupSettings.deniedTags.slice();
        deniedTags = this.attributesfilter(deniedTags);
        deniedTags = this.tagGrouping(deniedTags);
        for (var i = 0; i < deniedTags.length; i++) {
            var removableElement = clipBoardElem.querySelectorAll(deniedTags[i]);
            for (var j = removableElement.length - 1; j >= 0; j--) {
                var parentElem = removableElement[j].parentNode;
                while (removableElement[j].firstChild) {
                    parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);
                }
                parentElem.removeChild(removableElement[j]);
            }
        }
        return clipBoardElem;
    };
    //Denied Attributes
    PasteCleanup.prototype.deniedAttributes = function (clipBoardElem, clean) {
        var deniedAttrs = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedAttrs) ? [] : this.parent.pasteCleanupSettings.deniedAttrs.slice();
        if (clean) {
            deniedAttrs.push('style');
        }
        for (var i = 0; i < deniedAttrs.length; i++) {
            var removableAttrElement = clipBoardElem.
                querySelectorAll('[' + deniedAttrs[i] + ']');
            for (var j = 0; j < removableAttrElement.length; j++) {
                removableAttrElement[j].removeAttribute(deniedAttrs[i]);
            }
        }
        return clipBoardElem;
    };
    //Allowed Style Properties
    PasteCleanup.prototype.allowedStyle = function (clipBoardElem) {
        var allowedStyleProps = isNullOrUndefined(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] : this.parent.pasteCleanupSettings.allowedStyleProps.slice();
        allowedStyleProps.push('list-style-type', 'list-style');
        var styleElement = clipBoardElem.querySelectorAll('[style]');
        for (var i = 0; i < styleElement.length; i++) {
            var allowedStyleValue = '';
            var allowedStyleValueArray = [];
            var styleValue = styleElement[i].getAttribute('style').split(';');
            for (var k = 0; k < allowedStyleProps.length; k++) {
                for (var j = 0; j < styleValue.length; j++) {
                    if (!styleElement[i].getAttribute('style').split(';')[j]
                        .trim().indexOf(allowedStyleProps[k] + ':')) {
                        allowedStyleValueArray.push(styleElement[i].getAttribute('style').split(';')[j]);
                        k++;
                    }
                }
            }
            styleElement[i].removeAttribute('style');
            allowedStyleValue = allowedStyleValueArray.join(';').trim() === '' ?
                allowedStyleValueArray.join(';') : allowedStyleValueArray.join(';') + ';';
            if (allowedStyleValue) {
                styleElement[i].setAttribute('style', allowedStyleValue);
            }
        }
        return clipBoardElem;
    };
    /**
     * For internal use only - Get the module name.
     */
    PasteCleanup.prototype.getModuleName = function () {
        return 'pasteCleanup';
    };
    return PasteCleanup;
}());
export { PasteCleanup };
