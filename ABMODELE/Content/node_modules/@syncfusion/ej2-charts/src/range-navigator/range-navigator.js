var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Property, NotifyPropertyChanges, Complex, Collection, Browser } from '@syncfusion/ej2-base';
import { EventHandler, remove, Internationalization } from '@syncfusion/ej2-base';
import { Event } from '@syncfusion/ej2-base';
import { createSvg, removeElement } from '../common/utils/helper';
import { Rect, measureText, Size } from '@syncfusion/ej2-svg-base';
import { Border, Margin, PeriodSelectorSettings } from '../common/model/base';
import { RangeSeries } from './renderer/chart-render';
import { RangeNavigatorAxis } from './renderer/range-axis';
import { RangeNavigatorSeries, StyleSettings, RangeTooltipSettings } from './model/range-base';
import { RangeSlider } from './renderer/slider';
import { RectOption } from '../chart/index';
import { getElement, LineSeries } from '../chart/index';
import { getRangeThemeColor } from './utils/theme';
import { Font } from '../common/model/base';
import { MajorGridLines, MajorTickLines } from '../chart/axis/axis';
import { RangeNavigatorTheme } from './utils/theme';
import { Double } from '../chart/axis/double-axis';
import { ExportUtils } from '../common/utils/export';
/**
 * Range Navigator
 */
var RangeNavigator = /** @class */ (function (_super) {
    __extends(RangeNavigator, _super);
    /**
     * Constructor for creating the widget
     * @hidden
     */
    function RangeNavigator(options, element) {
        var _this = _super.call(this, options, element) || this;
        /** @private */
        _this.animateSeries = true;
        _this.chartid = 57725;
        return _this;
    }
    /**
     * Starting point of the control initialization
     */
    RangeNavigator.prototype.preRender = function () {
        this.unWireEvents();
        this.setCulture();
        if (this.element.id === '') {
            var collection = document.getElementsByClassName('e-rangenavigator').length;
            this.element.id = 'rangenavigator_' + this.chartid + '_' + collection;
        }
        this.wireEvents();
    };
    /**
     * To initialize the private variables
     */
    RangeNavigator.prototype.initPrivateVariables = function () {
        this.doubleModule = new Double();
        this.labels = [];
        this.rangeSlider = new RangeSlider(this);
        this.chartSeries = new RangeSeries(this);
        this.lineSeriesModule = new LineSeries();
        this.rangeAxis = new RangeNavigatorAxis(this);
    };
    /**
     * Method to set culture for chart
     */
    RangeNavigator.prototype.setCulture = function () {
        this.intl = new Internationalization();
    };
    /**
     * to initialize the slider
     */
    RangeNavigator.prototype.setSliderValue = function () {
        var isDateTime = this.valueType === 'DateTime';
        var range = this.chartSeries.xAxis.actualRange;
        this.startValue = this.startValue ? this.startValue : (!this.value[0] ? range.min :
            (isDateTime ? this.value[0].getTime() : +this.value[0]));
        this.endValue = this.endValue ? this.endValue : (!this.value[1] ? range.max :
            (isDateTime ? this.value[1].getTime() : +this.value[1]));
    };
    /**
     * To render the range navigator
     */
    RangeNavigator.prototype.render = function () {
        this.trigger('load', { rangeNavigator: this });
        this.setTheme();
        this.initPrivateVariables();
        this.createRangeSvg();
        this.calculateBounds();
        this.chartSeries.renderChart(this);
        removeElement('chartmeasuretext');
    };
    /**
     * Theming for rangeNavigator
     */
    RangeNavigator.prototype.setTheme = function () {
        /*! Set theme */
        this.themeStyle = getRangeThemeColor(this.theme, this);
    };
    /**
     * Method to create SVG for Range Navigator
     */
    RangeNavigator.prototype.createRangeSvg = function () {
        this.removeSvg();
        createSvg(this);
        this.renderChartBackground();
    };
    /**
     * Bounds calculation for widget performed.
     */
    RangeNavigator.prototype.calculateBounds = function () {
        var labelPadding = this.enableGrouping ? 15 : 8;
        var thumb = this.navigatorStyleSettings.thumb;
        var labelSize = measureText('tempString', this.labelStyle).height;
        var margin = this.margin;
        var isLeightWeight = !this.series.length;
        var tooltipSpace = (!this.disableRangeSelector) &&
            isLeightWeight && this.tooltip.enable ? 35 : 0;
        var selector = this.periodSelectorModule;
        if (this.periodSelectorModule && this.periodSelectorSettings.periods.length > 0) {
            selector.periodSelectorSize = { x: 0, y: 0, height: 0, width: 0 };
            selector.periodSelectorSize.width = this.availableSize.width;
            selector.periodSelectorSize.height = this.periodSelectorSettings.height;
            selector.periodSelectorSize.y = this.periodSelectorSettings.position === 'Bottom' ?
                this.availableSize.height - selector.periodSelectorSize.height : 0;
        }
        var periodSelectorY = this.periodSelectorSettings.position === 'Top' && selector ?
            selector.periodSelectorSize.y + selector.periodSelectorSize.height : 0;
        this.bounds = new Rect((this.themeStyle.thumbWidth / 2 + thumb.border.width + margin.left), margin.top + tooltipSpace + periodSelectorY, this.availableSize.width - this.themeStyle.thumbWidth - (thumb.border.width * 2) - margin.left - margin.right, this.availableSize.height - margin.top - margin.bottom - tooltipSpace - (selector ? selector.periodSelectorSize.height : 0));
        var deductHeight = ((this.labelPosition === 'Outside' || isLeightWeight) ?
            (labelSize + labelPadding) : 0) + ((this.tickPosition === 'Outside' || isLeightWeight) ?
            (this.majorTickLines.height) : 0);
        this.bounds.height -= deductHeight;
        if (isLeightWeight) {
            var height = this.enableGrouping ? this.bounds.height - ((labelSize) + labelPadding) : this.bounds.height;
            this.bounds.y += (this.themeStyle.thumbHeight > height ? (this.themeStyle.thumbHeight - height) / 2 : 0);
        }
        if (this.disableRangeSelector) {
            this.bounds.y = 0;
            this.bounds.height = this.periodSelectorSettings.height;
        }
    };
    /**
     * Creating Chart for range navigator
     */
    RangeNavigator.prototype.renderChart = function () {
        this.chartSeries.renderSeries(this);
        this.rangeAxis.renderGridLines();
        this.rangeAxis.renderAxisLabels();
        this.chartSeries.appendSeriesElements(this);
        this.createSecondaryElement();
        this.setSliderValue();
        this.renderPeriodSelector();
        this.renderSlider();
        if (!this.stockChart) {
            this.element.appendChild(this.svgObject);
        }
        var blazor = 'Blazor';
        this.trigger('loaded', { rangeNavigator: window[blazor] ? {} : this });
        this.rangeSlider.setSlider(this.startValue, this.endValue, false, this.tooltip.enable && this.tooltip.displayMode === 'Always');
    };
    /**
     * To render period selector value
     */
    RangeNavigator.prototype.renderPeriodSelector = function () {
        if (this.periodSelectorModule) {
            this.periodSelectorModule.renderSelectorElement(this);
            this.periodSelectorModule.renderSelector();
        }
    };
    /**
     * Creating secondary range navigator
     */
    RangeNavigator.prototype.createSecondaryElement = function () {
        // For userInteraction
        if (this.tooltip.enable) {
            var tooltipDiv = this.createElement('div');
            tooltipDiv.id = this.element.id + '_Secondary_Element';
            tooltipDiv.setAttribute('style', 'position: relative');
            this.element.appendChild(tooltipDiv);
        }
    };
    /**
     * Slider Calculation ane rendering performed here
     */
    RangeNavigator.prototype.renderSlider = function () {
        this.rangeSlider.render(this);
        this.rangeSlider.setSlider(this.startValue, this.endValue, true, this.tooltip.enable && this.tooltip.displayMode === 'Always');
    };
    /**
     * To Remove the SVG.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.removeSvg = function () {
        if (getElement(this.element.id + '_Secondary_Element')) {
            remove(getElement(this.element.id + '_Secondary_Element'));
        }
        var removeLength = 0;
        if (this.svgObject) {
            while (this.svgObject.childNodes.length > removeLength) {
                this.svgObject.removeChild(this.svgObject.firstChild);
            }
            if (!this.svgObject.hasChildNodes() && this.svgObject.parentNode && !this.stockChart) {
                remove(this.svgObject);
            }
        }
    };
    /** Wire, UnWire and Event releated calculation Started here */
    /**
     * Method to un-bind events for range navigator
     */
    RangeNavigator.prototype.unWireEvents = function () {
        /*! Find the Events type */
        var startEvent = Browser.touchStartEvent;
        var moveEvent = Browser.touchMoveEvent;
        var stopEvent = Browser.touchEndEvent;
        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';
        /*! UnBind the Event handler */
        EventHandler.remove(this.element, startEvent, this.rangeOnMouseDown);
        EventHandler.remove(this.element, moveEvent, this.mouseMove);
        EventHandler.remove(this.element, stopEvent, this.mouseEnd);
        EventHandler.remove(this.element, 'click', this.rangeOnMouseClick);
        //EventHandler.remove(this.element, 'contextmenu', this.rangeRightClick);
        EventHandler.remove(this.element, cancelEvent, this.mouseLeave);
        window.removeEventListener((Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.rangeResize);
    };
    /**
     * Method to bind events for range navigator
     */
    RangeNavigator.prototype.wireEvents = function () {
        /*! Find the Events type */
        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';
        /*! Bind the Event handler */
        EventHandler.add(this.element, Browser.touchStartEvent, this.rangeOnMouseDown, this);
        EventHandler.add(this.element, Browser.touchMoveEvent, this.mouseMove, this);
        EventHandler.add(this.element, Browser.touchEndEvent, this.mouseEnd, this);
        EventHandler.add(this.element, 'click', this.rangeOnMouseClick, this);
        //EventHandler.add(this.element, 'contextmenu', this.rangeRightClick, this);
        EventHandler.add(this.element, cancelEvent, this.mouseLeave, this);
        window.addEventListener((Browser.isTouch && ('orientation' in window && 'onorientationchange' in window)) ? 'orientationchange' : 'resize', this.rangeResize.bind(this));
        var element = this.element;
        element.style.touchAction = 'none';
        element.style.msTouchAction = 'none';
        element.style.msContentZooming = 'none';
        element.style.msUserSelect = 'none';
        element.style.webkitUserSelect = 'none';
        element.style.position = 'relative';
        element.style.display = 'block';
    };
    /**
     * Handles the widget resize.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.rangeResize = function (e) {
        var _this = this;
        this.animateSeries = false;
        if (this.resizeTo) {
            clearTimeout(this.resizeTo);
        }
        var arg = {
            rangeNavigator: this,
            name: 'resized',
            currentSize: new Size(0, 0),
            previousSize: new Size(this.availableSize.width, this.availableSize.height),
        };
        this.resizeTo = setTimeout(function () {
            if (_this.isDestroyed) {
                clearTimeout(_this.resizeTo);
                return;
            }
            if (_this.stockChart) {
                for (var i = 0; i < arg.rangeNavigator.series.length; i++) {
                    arg.rangeNavigator.series[i].dataSource = _this.stockChart.tempDataSource[i] || _this.stockChart.blazorDataSource[i];
                }
                if (_this.stockChart.dataSource) {
                    arg.rangeNavigator.dataSource = _this.stockChart.tempDataSource[0];
                }
            }
            _this.createRangeSvg();
            arg.currentSize = _this.availableSize;
            _this.trigger('resized', arg);
            _this.calculateBounds();
            _this.chartSeries.renderChart(_this);
        }, 500);
        return false;
    };
    /**
     * Handles the mouse move.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.mouseMove = function (e) {
        this.mouseX = this.setMouseX(e);
        this.notify(Browser.touchMoveEvent, e);
        return false;
    };
    /**
     * Handles the mouse leave.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.mouseLeave = function (e) {
        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';
        this.mouseX = this.setMouseX(e);
        this.notify(cancelEvent, e);
        return false;
    };
    /**
     * Handles the mouse click on range navigator.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.rangeOnMouseClick = function (e) {
        this.notify('click', e);
        return false;
    };
    /**
     * Handles the print method for range navigator control.
     */
    RangeNavigator.prototype.print = function (id) {
        new ExportUtils(this).print(id);
    };
    /**
     * Handles the export method for range navigator control.
     * @param type
     * @param fileName
     */
    RangeNavigator.prototype.export = function (type, fileName, orientation, controls, width, height, isVertical) {
        controls = controls ? controls : [this];
        new ExportUtils(this).export(type, fileName, orientation, controls, width, height, isVertical);
    };
    /**
     * Creating a background element to the svg object
     */
    RangeNavigator.prototype.renderChartBackground = function () {
        var rect = new RectOption(this.element.id + '_ChartBorder', this.themeStyle.background, { width: 0, color: 'transparent' }, 1, new Rect(0, 0, this.availableSize.width, this.availableSize.height));
        this.svgObject.appendChild(this.renderer.drawRectangle(rect));
    };
    /**
     * Handles the mouse down on range navigator.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.rangeOnMouseDown = function (e) {
        this.mouseDownX = this.setMouseX(e);
        this.notify(Browser.touchStartEvent, e);
        return false;
    };
    /**
     * Handles the mouse up.
     * @return {boolean}
     * @private
     */
    RangeNavigator.prototype.mouseEnd = function (e) {
        this.mouseX = this.setMouseX(e);
        this.notify(Browser.touchEndEvent, e);
        return false;
    };
    // private rangeRightClick(event: MouseEvent | PointerEvent): boolean {
    //     if (event.buttons === 2 || event.which === 0 || (<PointerEvent>event).pointerType === 'touch') {
    //         event.preventDefault();
    //         event.stopPropagation();
    //         return false;
    //     }
    //     return true;
    // }
    /**
     * To find mouse x, y for aligned range navigator element svg position
     */
    RangeNavigator.prototype.setMouseX = function (e) {
        var pageX = e.type.indexOf('touch') > -1 ?
            e.changedTouches[0].clientX : e.clientX;
        var rect = this.element.getBoundingClientRect();
        var svgRect = !this.stockChart ? getElement(this.element.id + '_svg').getBoundingClientRect() :
            getElement(this.element.id).getBoundingClientRect();
        return (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);
    };
    /** Wire, UnWire and Event releated calculation End here */
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    RangeNavigator.prototype.getPersistData = function () {
        var keyEntity = ['loaded'];
        return this.addOnPersist(keyEntity);
    };
    /**
     * OnProperty change method calling here
     * @param newProp
     * @param oldProp
     */
    RangeNavigator.prototype.onPropertyChanged = function (newProp, oldProp) {
        var renderer = false;
        var refreshBounds = false;
        var refreshRange = false;
        this.animateSeries = false;
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'width':
                case 'height':
                case 'navigatorBorder':
                case 'enableGrouping':
                case 'labelPosition':
                case 'tickPosition':
                case 'labelStyle':
                    refreshBounds = true;
                    break;
                case 'series':
                case 'enableRtl':
                case 'dataSource':
                case 'xName':
                case 'yName':
                case 'query':
                case 'minimum':
                case 'maximum':
                case 'interval':
                case 'intervalType':
                case 'logBase':
                case 'valueType':
                case 'majorGridLines':
                case 'minorGridLines':
                case 'navigatorStyleSettings':
                case 'labelFormat':
                case 'skeleton':
                case 'skeletonType':
                case 'secondaryLabelAlignment':
                    renderer = true;
                    break;
                case 'theme':
                    this.animateSeries = true;
                    break;
                case 'locale':
                    _super.prototype.refresh.call(this);
                    break;
                case 'value':
                    this.startValue = null;
                    this.endValue = null;
                    refreshRange = true;
                    break;
            }
        }
        if (!refreshBounds && renderer) {
            this.removeSvg();
            this.chartSeries.xMin = Infinity;
            this.chartSeries.xMax = -Infinity;
            this.chartSeries.renderChart(this);
        }
        if (refreshBounds) {
            this.removeSvg();
            this.calculateBounds();
            this.chartSeries.renderChart(this);
        }
        if (!refreshBounds && !renderer && refreshRange) {
            this.setSliderValue();
            this.rangeSlider.setSlider(this.startValue, this.endValue, true, this.tooltip.enable && this.tooltip.displayMode === 'Always');
        }
    };
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @private
     */
    RangeNavigator.prototype.requiredModules = function () {
        var _this = this;
        var modules = [];
        this.series.map(function (series) {
            modules.push({
                member: series.type + 'Series',
                args: [_this]
            });
        });
        if (this.periodSelectorSettings.periods.length > 0) {
            modules.push({
                member: 'PeriodSelector',
                args: [this]
            });
        }
        if (this.valueType !== 'Double') {
            modules.push({
                member: this.valueType,
                args: [this]
            });
        }
        if (this.tooltip.enable) {
            modules.push({
                member: 'RangeTooltip',
                args: [this]
            });
        }
        return modules;
    };
    /**
     * To get the module name of the widget
     */
    RangeNavigator.prototype.getModuleName = function () {
        return 'rangeNavigator';
    };
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}.
     * @member of rangeNavigator
     */
    RangeNavigator.prototype.destroy = function () {
        this.unWireEvents();
        this.rangeSlider.destroy();
        _super.prototype.destroy.call(this);
        this.element.classList.remove('e-rangenavigator');
    };
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "width", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "height", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "dataSource", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "xName", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "yName", void 0);
    __decorate([
        Property()
    ], RangeNavigator.prototype, "query", void 0);
    __decorate([
        Collection([], RangeNavigatorSeries)
    ], RangeNavigator.prototype, "series", void 0);
    __decorate([
        Complex({}, RangeTooltipSettings)
    ], RangeNavigator.prototype, "tooltip", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "minimum", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "maximum", void 0);
    __decorate([
        Property(null)
    ], RangeNavigator.prototype, "interval", void 0);
    __decorate([
        Property('Auto')
    ], RangeNavigator.prototype, "intervalType", void 0);
    __decorate([
        Property('Hide')
    ], RangeNavigator.prototype, "labelIntersectAction", void 0);
    __decorate([
        Property(10)
    ], RangeNavigator.prototype, "logBase", void 0);
    __decorate([
        Property('Double')
    ], RangeNavigator.prototype, "valueType", void 0);
    __decorate([
        Property('Outside')
    ], RangeNavigator.prototype, "labelPosition", void 0);
    __decorate([
        Property(500)
    ], RangeNavigator.prototype, "animationDuration", void 0);
    __decorate([
        Property(false)
    ], RangeNavigator.prototype, "enableGrouping", void 0);
    __decorate([
        Property(false)
    ], RangeNavigator.prototype, "enableDeferredUpdate", void 0);
    __decorate([
        Property(false)
    ], RangeNavigator.prototype, "disableRangeSelector", void 0);
    __decorate([
        Property(false)
    ], RangeNavigator.prototype, "allowSnapping", void 0);
    __decorate([
        Property(false)
    ], RangeNavigator.prototype, "useGroupingSeparator", void 0);
    __decorate([
        Property()
    ], RangeNavigator.prototype, "groupBy", void 0);
    __decorate([
        Property('Outside')
    ], RangeNavigator.prototype, "tickPosition", void 0);
    __decorate([
        Complex(RangeNavigatorTheme.axisLabelFont, Font)
    ], RangeNavigator.prototype, "labelStyle", void 0);
    __decorate([
        Complex({}, MajorGridLines)
    ], RangeNavigator.prototype, "majorGridLines", void 0);
    __decorate([
        Complex({}, MajorTickLines)
    ], RangeNavigator.prototype, "majorTickLines", void 0);
    __decorate([
        Complex({}, StyleSettings)
    ], RangeNavigator.prototype, "navigatorStyleSettings", void 0);
    __decorate([
        Complex({}, PeriodSelectorSettings)
    ], RangeNavigator.prototype, "periodSelectorSettings", void 0);
    __decorate([
        Complex({ color: '#DDDDDD', width: 1 }, Border)
    ], RangeNavigator.prototype, "navigatorBorder", void 0);
    __decorate([
        Property('Material')
    ], RangeNavigator.prototype, "theme", void 0);
    __decorate([
        Property([])
    ], RangeNavigator.prototype, "value", void 0);
    __decorate([
        Property('')
    ], RangeNavigator.prototype, "labelFormat", void 0);
    __decorate([
        Property('')
    ], RangeNavigator.prototype, "skeleton", void 0);
    __decorate([
        Property('DateTime')
    ], RangeNavigator.prototype, "skeletonType", void 0);
    __decorate([
        Property('Middle')
    ], RangeNavigator.prototype, "secondaryLabelAlignment", void 0);
    __decorate([
        Complex({ top: 5, bottom: 5, right: 5, left: 5 }, Margin)
    ], RangeNavigator.prototype, "margin", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "load", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "loaded", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "resized", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "labelRender", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "changed", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "tooltipRender", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "selectorRender", void 0);
    __decorate([
        Event()
    ], RangeNavigator.prototype, "beforePrint", void 0);
    RangeNavigator = __decorate([
        NotifyPropertyChanges
    ], RangeNavigator);
    return RangeNavigator;
}(Component));
export { RangeNavigator };
